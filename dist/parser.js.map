{"version":3,"sources":["../lib/parser.js"],"names":["require","maxBy","isObject","isUndefined","getOptions","getSubsystems","parseMessage","messages","subsystem","render","ssLength","length","ss","out","message","i","nextMsg","test","match","forEach","renderObj","colorTag","customColors","console","warn","customMessage","replace","Array","join","module","exports"],"mappings":";;eAAyCA,QAAQ,QAAR,C;IAAjCC,K,YAAAA,K;IAAOC,Q,YAAAA,Q;IAAUC,W,YAAAA,W;;gBACaH,QAAQ,YAAR,C;IAA9BI,U,aAAAA,U;IAAYC,a,aAAAA,a;;AAEpB,IAAMC,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,SAAX,EAAsBC,MAAtB,EAAiC;AACpD,MAAMC,WAAWL,gBAAgBM,MAAhB,GAAyB,CAAzB,GAA6BV,MAAMI,eAAN,EAAuB,UAACO,EAAD;AAAA,WAAQA,GAAGD,MAAX;AAAA,GAAvB,EAA0CA,MAA1C,GAAmD,CAAhF,GAAoFH,UAAUG,MAA/G;AACA,MAAIE,MAAM,EAAV;;AAFoD;AAIlD,QAAIC,UAAUP,SAASQ,EAAT,CAAd;AACA,QAAIb,SAASY,OAAT,CAAJ,EAAuB;AACrBD,aAAO,OAAOJ,OAAOK,OAAP,EAAgBJ,WAAW,CAA3B,CAAd;AACD,KAFD,MAEO;AACL,UAAIM,UAAUT,SAASQ,KAAI,CAAb,CAAd;AACA,UAAI,OAAOE,IAAP,CAAYH,OAAZ,KAAwBE,QAAQ,OAAR,CAA5B,EAA8C;AAC5CD;AACA;AACAD,gBAAQI,KAAR,CAAc,UAAd,EAA0BC,OAA1B,CAAkC,yBAAiB;AACjD,cAAIC,YAAY,EAAhB;AACA,cAAIC,WAAWL,WAAWA,QAAQ,OAAR,CAA1B;AACA,cAAIK,YAAYlB,YAAYC,aAAakB,YAAb,CAA0BD,QAA1B,CAAZ,CAAhB,EAAkE;AAChEE,oBAAQC,IAAR,+CAAyDH,QAAzD;AACD,WAFD,MAEO,IAAIA,QAAJ,EAAc;AACnBD,sBAAUC,QAAV,IAAsBI,cAAcC,OAAd,CAAsB,IAAtB,EAA4B,EAA5B,CAAtB;AACAZ,sBAAUA,QAAQY,OAAR,CAAgBD,aAAhB,EAA+BhB,OAAOW,SAAP,CAA/B,CAAV;AACD;AACDJ,oBAAUT,SAASQ,KAAI,CAAb,CAAV;AACAA;AACD,SAXD;AAYAF,eAAOc,MAAMjB,WAAWF,UAAUG,MAA3B,EAAmCiB,IAAnC,CAAwC,GAAxC,IAA+C,KAA/C,GAAuDd,OAA9D;AACD,OAhBD,MAgBO,IAAIC,OAAM,CAAV,EAAa;AAClBF,eAAOc,MAAMjB,WAAWF,UAAUG,MAA3B,EAAmCiB,IAAnC,CAAwC,GAAxC,IAA+C,KAA/C,GAAuDnB,OAAOK,OAAP,CAA9D;AACD,OAFM,MAEA;AACLD,eAAO,OAAOc,MAAMjB,WAAW,CAAjB,EAAoBkB,IAApB,CAAyB,GAAzB,CAAP,GAAuCnB,OAAOK,OAAP,CAA9C;AACD;AACF;AA3BMC,KAH2C;AAAA;;AAGpD,OAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAIR,SAASI,MAA7B,EAAqCI,GAArC,EAA0C;AAAA,UAAjCA,CAAiC;AA4BzC;AACD,SAAOF,GAAP;AACD,CAjCD;;AAmCAgB,OAAOC,OAAP,GAAiBxB,YAAjB","file":"parser.js","sourcesContent":["const { maxBy, isObject, isUndefined } = require('lodash');\nconst { getOptions, getSubsystems } = require('./settings');\n\nconst parseMessage = (messages, subsystem, render) => {\n  const ssLength = getSubsystems().length > 0 ? maxBy(getSubsystems(), (ss) => ss.length).length + 1 : subsystem.length;\n  let out = '';\n  for (let i = 0; i < messages.length; i++) {\n    let message = messages[i];\n    if (isObject(message)) {\n      out += '\\n' + render(message, ssLength + 7);\n    } else {\n      let nextMsg = messages[i + 1];\n      if (/%.*%/.test(message) && nextMsg['color']) {\n        i++;\n        // check for special color directive\n        message.match(/(%.*?%)/g).forEach(customMessage => {\n          let renderObj = {};\n          let colorTag = nextMsg && nextMsg['color'];\n          if (colorTag && isUndefined(getOptions().customColors[colorTag])) {\n            console.warn(`\\n -- Debugger Warning: Color Directive \"${colorTag}\" was not found in the settings. --\\n`);\n          } else if (colorTag) {\n            renderObj[colorTag] = customMessage.replace(/%/g, '');\n            message = message.replace(customMessage, render(renderObj));\n          }\n          nextMsg = messages[i + 1];\n          i++;\n        });\n        out += Array(ssLength - subsystem.length).join(' ') + '   ' + message;\n      } else if (i === 0) {\n        out += Array(ssLength - subsystem.length).join(' ') + '   ' + render(message);\n      } else {\n        out += '\\n' + Array(ssLength + 7).join(' ') + render(message);\n      }\n    }\n  }\n  return out;\n};\n\nmodule.exports = parseMessage;\n"]}