{"version":3,"sources":["../lib/debugger.js"],"names":["pjson","require","_","parseMessages","options","subsystems","render","init","findLevel","subsystem","conf","depth","level","curr","slice","next","length","has","get","concat","debug","messages","confLevel","split","subObj","fatal","error","warn","info","trace","log","console","showColors","each","keys","customColors","key","color","customOptions","defaultsDeep","createDebug","push","bind","undefined","module","exports"],"mappings":"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","file":"debugger.js","sourcesContent":["const pjson = require('prettyjson-256');\nconst _ = require('lodash');\n\nconst parseMessages = require('./parser');\nlet { options, subsystems } = require('./settings');\n\nconst render = pjson.init(options);\n\nconst findLevel = (subsystem, conf, depth, level) => {\n  const curr = subsystem.slice(0, depth);\n  const next = subsystem.length > depth ? subsystem.slice(0, depth + 1) : null;\n  if (_.has(conf, curr)) {\n    if (typeof _.get(conf, curr) === 'number') {\n      return _.get(conf, curr);\n    } else if (subsystem.length + 1 > depth && _.has(conf, next)) {\n      level = findLevel(subsystem, conf, ++depth, level);\n    } else if (typeof _.get(conf, curr.concat('*')) === 'number') {\n      return _.get(conf, curr.concat('*'));\n    }\n  }\n  return level;\n};\n\nconst debug = (level, subsystem, ...messages) => {\n  /* TODO: make this overwritten by DEBUG=* environment variable\n    nested subsystems delineated by :'s (app:routes:admin)\n    set as single number for log level, two numbers comma separated to indicate object logging depth */\n  const conf = require('./config.json');\n\n  const confLevel = findLevel(subsystem.split(':'), conf, 1, 6);\n  if (level > confLevel) {\n    return;\n  }\n  const subObj = level === 0\n    ? { fatal: subsystem }\n    : level === 1\n    ? { error: subsystem }\n    : level === 2\n    ? { warn: subsystem }\n    : level === 4\n    ? { info: subsystem }\n    : level === 5\n    ? { debug: subsystem }\n    : level === 6\n    ? { trace: subsystem }\n    : { log: subsystem };\n\n  console.log('  ' + render(subObj) + parseMessages(messages, subsystem, render));\n};\n\nexport const showColors = () => {\n  _.each(_.keys(options.customColors), (key) => {\n    console.log(parseMessages([ `%Custom Color: ${key}%`, { color: key } ], '', render));\n  });\n};\n\nexport const init = (customOptions) => {\n  options = _.defaultsDeep(options, customOptions);\n};\n\nexport const createDebug = (subsystem = '') => {\n  subsystems.push(subsystem);\n  return {\n    fatal: debug.bind(undefined, 0, subsystem),\n    error: debug.bind(undefined, 1, subsystem),\n    warn:  debug.bind(undefined, 2, subsystem),\n    log:   debug.bind(undefined, 3, subsystem),\n    info:  debug.bind(undefined, 4, subsystem),\n    debug: debug.bind(undefined, 5, subsystem),\n    trace: debug.bind(undefined, 6, subsystem),\n    showColors: showColors,\n    init: init\n  };\n};\n\nmodule.exports = createDebug;\n"]}