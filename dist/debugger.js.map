{"version":3,"sources":["../lib/debugger.js"],"names":["fs","require","path","appRoot","pjson","has","get","keys","each","defaultsDeep","parseMessages","options","subsystems","render","init","findLevel","subsystem","conf","depth","level","curr","slice","next","length","concat","loadConfFile","existsSync","resolve","__dirname","JSON","parse","readFileSync","toString","debug","messages","confLevel","split","subObj","fatal","error","warn","info","trace","log","console","showColors","customColors","key","color","customOptions","createDebug","push","bind","undefined","module","exports"],"mappings":"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","file":"debugger.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst appRoot = require('app-root-path');\nconst pjson = require('prettyjson-256');\nconst { has, get, keys, each, defaultsDeep } = require('lodash');\n\nconst parseMessages = require('./parser');\nlet { options, subsystems } = require('./settings');\n\nconst render = pjson.init(options);\n\n// TODO: on load check configuration file for errors\n\nconst findLevel = (subsystem, conf, depth, level) => {\n  const curr = subsystem.slice(0, depth);\n  const next = subsystem.length > depth ? subsystem.slice(0, depth + 1) : null;\n  if (has(conf, curr)) {\n    if (typeof get(conf, curr) === 'number') {\n      return get(conf, curr);\n    } else if (subsystem.length + 1 > depth && has(conf, next)) {\n      level = findLevel(subsystem, conf, ++depth, level);\n    } else if (typeof get(conf, curr.concat('*')) === 'number') {\n      return get(conf, curr.concat('*'));\n    }\n  }\n  return level;\n};\n\nconst loadConfFile = () => {\n  // TODO: become a good programmer\n  if (fs.existsSync(path.resolve(__dirname, '.debugger-256'))) {\n    return JSON.parse(fs.readFileSync(path.resolve(__dirname, '.debugger-256')));\n  } else if (fs.existsSync(path.resolve(appRoot.toString(), '.debugger-256'))) {\n    return JSON.parse(fs.readFileSync(path.resolve(appRoot.toString(), '.debugger-256')));\n  }\n  return false;\n};\n\nconst debug = (level, subsystem, ...messages) => {\n  /* TODO: make this overwritten by DEBUG=* environment variable\n    nested subsystems delineated by :'s (app:routes:admin)\n    set as single number for log level, two numbers comma separated to indicate object logging depth */\n  const conf = loadConfFile();\n\n  if (conf) {\n    const confLevel = findLevel(subsystem.split(':'), conf, 1, 6);\n    if (level > confLevel) {\n      return;\n    }\n    conf['_debugger-256'] && init(conf['_debugger-256']);\n  }\n  const subObj = level === 0\n    ? { fatal: subsystem }\n    : level === 1\n    ? { error: subsystem }\n    : level === 2\n    ? { warn: subsystem }\n    : level === 4\n    ? { info: subsystem }\n    : level === 5\n    ? { debug: subsystem }\n    : level === 6\n    ? { trace: subsystem }\n    : { log: subsystem };\n\n  console.log('  ' + render(subObj) + parseMessages(messages, subsystem, render));\n};\n\nexport const showColors = () => {\n  each(keys(options.customColors), (key) => {\n    console.log(parseMessages([ `%Custom Color: ${key}%`, { color: key } ], '', render));\n  });\n};\n\nexport const init = (customOptions) => {\n  options = defaultsDeep(options, customOptions);\n};\n\nexport const createDebug = (subsystem = '') => {\n  subsystems.push(subsystem);\n  return {\n    fatal: debug.bind(undefined, 0, subsystem),\n    error: debug.bind(undefined, 1, subsystem),\n    warn:  debug.bind(undefined, 2, subsystem),\n    log:   debug.bind(undefined, 3, subsystem),\n    info:  debug.bind(undefined, 4, subsystem),\n    debug: debug.bind(undefined, 5, subsystem),\n    trace: debug.bind(undefined, 6, subsystem),\n    showColors: showColors,\n    init: init\n  };\n};\n\nmodule.exports = createDebug;\n"]}