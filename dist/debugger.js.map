{"version":3,"sources":["../lib/debugger.js"],"names":["pjson","require","has","get","keys","each","isObject","log","parseMessages","getOptions","getSubsystems","addSubsystem","getConf","resetSettings","initSettings","render","init","findLevel","subsystem","conf","depth","level","curr","slice","next","length","concat","debug","messages","confLevel","split","subObj","fatal","error","warn","info","trace","showColors","customColors","key","color","customSettings","reset","createDebug","bind","undefined","module","exports"],"mappings":";;;;;AAAA,IAAMA,QAAQC,QAAQ,gBAAR,CAAd;;eAC2CA,QAAQ,QAAR,C;IAAnCC,G,YAAAA,G;IAAKC,G,YAAAA,G;IAAKC,I,YAAAA,I;IAAMC,I,YAAAA,I;IAAMC,Q,YAAAA,Q;;gBAEdL,QAAQ,WAAR,C;IAARM,G,aAAAA,G;;AACR,IAAMC,gBAAgBP,QAAQ,UAAR,CAAtB;;gBAOmBA,QAAQ,YAAR,C;IALjBQ,U,aAAAA,U;IACAC,a,aAAAA,a;IACAC,Y,aAAAA,Y;IACAC,O,aAAAA,O;IACAC,a,aAAAA,a;IACAC,Y,aAAAA,Y;;AAEF,IAAMC,SAASf,MAAMgB,IAAN,CAAWP,YAAX,CAAf;;AAEA;;AAEA,IAAMQ,YAAY,SAAZA,SAAY,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAmC;AACnD,MAAMC,OAAOJ,UAAUK,KAAV,CAAgB,CAAhB,EAAmBH,KAAnB,CAAb;AACA,MAAMI,OAAON,UAAUO,MAAV,GAAmBL,KAAnB,GAA2BF,UAAUK,KAAV,CAAgB,CAAhB,EAAmBH,QAAQ,CAA3B,CAA3B,GAA2D,IAAxE;AACA,MAAIlB,IAAIiB,IAAJ,EAAUG,IAAV,CAAJ,EAAqB;AACnB,QAAI,OAAOnB,IAAIgB,IAAJ,EAAUG,IAAV,CAAP,KAA2B,QAA/B,EAAyC;AACvC,aAAOnB,IAAIgB,IAAJ,EAAUG,IAAV,CAAP;AACD,KAFD,MAEO,IAAIJ,UAAUO,MAAV,GAAmB,CAAnB,GAAuBL,KAAvB,IAAgClB,IAAIiB,IAAJ,EAAUK,IAAV,CAApC,EAAqD;AAC1DH,cAAQJ,UAAUC,SAAV,EAAqBC,IAArB,EAA2B,EAAEC,KAA7B,EAAoCC,KAApC,CAAR;AACD,KAFM,MAEA,IAAI,OAAOlB,IAAIgB,IAAJ,EAAUG,KAAKI,MAAL,CAAY,GAAZ,CAAV,CAAP,KAAuC,QAA3C,EAAqD;AAC1D,aAAOvB,IAAIgB,IAAJ,EAAUG,KAAKI,MAAL,CAAY,GAAZ,CAAV,CAAP;AACD;AACF;AACD,SAAOL,KAAP;AACD,CAbD;;AAeA,IAAMM,QAAQ,SAARA,KAAQ,CAACN,KAAD,EAAQH,SAAR,EAAmC;AAAA,oCAAbU,QAAa;AAAbA,YAAa;AAAA;;AAC/C;;;AAGA,MAAItB,SAASM,SAAT,CAAJ,EAAyB;AACvB,QAAMiB,YAAYZ,UAAUC,UAAUY,KAAV,CAAgB,GAAhB,CAAV,EAAgClB,SAAhC,EAA2C,CAA3C,EAA8C,CAA9C,CAAlB;AACA,QAAIS,QAAQQ,SAAZ,EAAuB;AACrB;AACD;AACF;AACD,MAAME,SAASV,UAAU,CAAV,GACX,EAAEW,OAAOd,SAAT,EADW,GAEXG,UAAU,CAAV,GACA,EAAEY,OAAOf,SAAT,EADA,GAEAG,UAAU,CAAV,GACA,EAAEa,MAAMhB,SAAR,EADA,GAEAG,UAAU,CAAV,GACA,EAAEc,MAAMjB,SAAR,EADA,GAEAG,UAAU,CAAV,GACA,EAAEM,OAAOT,SAAT,EADA,GAEAG,UAAU,CAAV,GACA,EAAEe,OAAOlB,SAAT,EADA,GAEA,EAAEX,KAAKW,SAAP,EAZJ;;AAcAX,MAAI,OAAOQ,OAAOgB,MAAP,CAAP,GAAwBvB,cAAcoB,QAAd,EAAwBV,SAAxB,EAAmCH,MAAnC,CAA5B;AACD,CAzBD;;AA2BO,IAAMsB,kCAAa,SAAbA,UAAa,GAAM;AAC9BhC,OAAKD,KAAKK,aAAa6B,YAAlB,CAAL,EAAsC,UAACC,GAAD,EAAS;AAC7ChC,QAAIC,cAAc,qBAAoB+B,GAApB,QAA4B,EAAEC,OAAOD,GAAT,EAA5B,CAAd,EAA4D,EAA5D,EAAgExB,MAAhE,CAAJ;AACD,GAFD;AAGD,CAJM;;AAMA,IAAMC,sBAAO,SAAPA,IAAO,CAACyB,cAAD,EAAoB;AACtCzC,QAAMgB,IAAN,CAAWF,aAAa2B,cAAb,CAAX;AACD,CAFM;;AAIA,IAAMC,wBAAQ,SAARA,KAAQ,GAAM;AACzB1C,QAAMgB,IAAN,CAAWH,eAAX;AACD,CAFM;;AAIA,IAAM8B,oCAAc,SAAdA,WAAc,GAAoB;AAAA,MAAnBzB,SAAmB,uEAAP,EAAO;;AAC7CP,eAAaO,SAAb;AACA,SAAO;AACLc,WAAOL,MAAMiB,IAAN,CAAWC,SAAX,EAAsB,CAAtB,EAAyB3B,SAAzB,CADF;AAELe,WAAON,MAAMiB,IAAN,CAAWC,SAAX,EAAsB,CAAtB,EAAyB3B,SAAzB,CAFF;AAGLgB,UAAOP,MAAMiB,IAAN,CAAWC,SAAX,EAAsB,CAAtB,EAAyB3B,SAAzB,CAHF;AAILX,SAAOoB,MAAMiB,IAAN,CAAWC,SAAX,EAAsB,CAAtB,EAAyB3B,SAAzB,CAJF;AAKLiB,UAAOR,MAAMiB,IAAN,CAAWC,SAAX,EAAsB,CAAtB,EAAyB3B,SAAzB,CALF;AAMLS,WAAOA,MAAMiB,IAAN,CAAWC,SAAX,EAAsB,CAAtB,EAAyB3B,SAAzB,CANF;AAOLkB,WAAOT,MAAMiB,IAAN,CAAWC,SAAX,EAAsB,CAAtB,EAAyB3B,SAAzB,CAPF;AAQLmB,0BARK;AASLrB,cATK;AAUL0B;AAVK,GAAP;AAYD,CAdM;;AAgBPI,OAAOC,OAAP,GAAiBJ,WAAjB","file":"debugger.js","sourcesContent":["const pjson = require('prettyjson-256');\nconst { has, get, keys, each, isObject } = require('lodash');\n\nconst { log } = require('./console');\nconst parseMessages = require('./parser');\nconst {\n  getOptions,\n  getSubsystems,\n  addSubsystem,\n  getConf,\n  resetSettings,\n  initSettings } = require('./settings');\n\nconst render = pjson.init(getOptions());\n\n// TODO: on load check configuration file for errors\n\nconst findLevel = (subsystem, conf, depth, level) => {\n  const curr = subsystem.slice(0, depth);\n  const next = subsystem.length > depth ? subsystem.slice(0, depth + 1) : null;\n  if (has(conf, curr)) {\n    if (typeof get(conf, curr) === 'number') {\n      return get(conf, curr);\n    } else if (subsystem.length + 1 > depth && has(conf, next)) {\n      level = findLevel(subsystem, conf, ++depth, level);\n    } else if (typeof get(conf, curr.concat('*')) === 'number') {\n      return get(conf, curr.concat('*'));\n    }\n  }\n  return level;\n};\n\nconst debug = (level, subsystem, ...messages) => {\n  /* TODO: make this overwritten by DEBUG=* environment variable\n    nested subsystems delineated by :'s (app:routes:admin)\n    set as single number for log level, two numbers comma separated to indicate object logging depth */\n  if (isObject(getConf())) {\n    const confLevel = findLevel(subsystem.split(':'), getConf(), 1, 6);\n    if (level > confLevel) {\n      return;\n    }\n  }\n  const subObj = level === 0\n    ? { fatal: subsystem }\n    : level === 1\n    ? { error: subsystem }\n    : level === 2\n    ? { warn: subsystem }\n    : level === 4\n    ? { info: subsystem }\n    : level === 5\n    ? { debug: subsystem }\n    : level === 6\n    ? { trace: subsystem }\n    : { log: subsystem };\n\n  log('  ' + render(subObj) + parseMessages(messages, subsystem, render));\n};\n\nexport const showColors = () => {\n  each(keys(getOptions().customColors), (key) => {\n    log(parseMessages([ `%Custom Color: ${key}%`, { color: key } ], '', render));\n  });\n};\n\nexport const init = (customSettings) => {\n  pjson.init(initSettings(customSettings));\n};\n\nexport const reset = () => {\n  pjson.init(resetSettings());\n};\n\nexport const createDebug = (subsystem = '') => {\n  addSubsystem(subsystem);\n  return {\n    fatal: debug.bind(undefined, 0, subsystem),\n    error: debug.bind(undefined, 1, subsystem),\n    warn:  debug.bind(undefined, 2, subsystem),\n    log:   debug.bind(undefined, 3, subsystem),\n    info:  debug.bind(undefined, 4, subsystem),\n    debug: debug.bind(undefined, 5, subsystem),\n    trace: debug.bind(undefined, 6, subsystem),\n    showColors,\n    init,\n    reset\n  };\n};\n\nmodule.exports = createDebug;\n"]}