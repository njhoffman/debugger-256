{"version":3,"sources":["../lib/debugger.js"],"names":["pjson","require","has","get","keys","each","log","parseMessages","options","subsystems","conf","initSettings","render","init","findLevel","subsystem","depth","level","curr","slice","next","length","concat","debug","messages","confLevel","split","subObj","fatal","error","warn","info","trace","showColors","customColors","key","color","customSettings","createDebug","push","bind","undefined","module","exports"],"mappings":"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","file":"debugger.js","sourcesContent":["const pjson = require('prettyjson-256');\nconst { has, get, keys, each } = require('lodash');\n\nconst { log } = require('./console');\nconst parseMessages = require('./parser');\nconst { options, subsystems, conf, initSettings } = require('./settings');\n\nconst render = pjson.init(options);\n\n// TODO: on load check configuration file for errors\n\nconst findLevel = (subsystem, conf, depth, level) => {\n  const curr = subsystem.slice(0, depth);\n  const next = subsystem.length > depth ? subsystem.slice(0, depth + 1) : null;\n  if (has(conf, curr)) {\n    if (typeof get(conf, curr) === 'number') {\n      return get(conf, curr);\n    } else if (subsystem.length + 1 > depth && has(conf, next)) {\n      level = findLevel(subsystem, conf, ++depth, level);\n    } else if (typeof get(conf, curr.concat('*')) === 'number') {\n      return get(conf, curr.concat('*'));\n    }\n  }\n  return level;\n};\n\nconst debug = (level, subsystem, ...messages) => {\n  /* TODO: make this overwritten by DEBUG=* environment variable\n    nested subsystems delineated by :'s (app:routes:admin)\n    set as single number for log level, two numbers comma separated to indicate object logging depth */\n  if (conf) {\n    const confLevel = findLevel(subsystem.split(':'), conf, 1, 6);\n    if (level > confLevel) {\n      return;\n    }\n  }\n  const subObj = level === 0\n    ? { fatal: subsystem }\n    : level === 1\n    ? { error: subsystem }\n    : level === 2\n    ? { warn: subsystem }\n    : level === 4\n    ? { info: subsystem }\n    : level === 5\n    ? { debug: subsystem }\n    : level === 6\n    ? { trace: subsystem }\n    : { log: subsystem };\n\n  log('  ' + render(subObj) + parseMessages(messages, subsystem, render));\n};\n\nexport const showColors = () => {\n  each(keys(options.customColors), (key) => {\n    log(parseMessages([ `%Custom Color: ${key}%`, { color: key } ], '', render));\n  });\n};\n\nexport const init = (customSettings) => {\n  pjson.init(initSettings(customSettings));\n};\n\nexport const createDebug = (subsystem = '') => {\n  subsystem && subsystem.length > 0 && subsystems.push(subsystem);\n  return {\n    fatal: debug.bind(undefined, 0, subsystem),\n    error: debug.bind(undefined, 1, subsystem),\n    warn:  debug.bind(undefined, 2, subsystem),\n    log:   debug.bind(undefined, 3, subsystem),\n    info:  debug.bind(undefined, 4, subsystem),\n    debug: debug.bind(undefined, 5, subsystem),\n    trace: debug.bind(undefined, 6, subsystem),\n    showColors: showColors,\n    init: init\n  };\n};\n\nmodule.exports = createDebug;\n"]}