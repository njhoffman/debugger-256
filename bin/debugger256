#!/usr/bin/env node

// opens a stream for piping output into
// to preserve incoming ansi colors use 'unbuffer' in expect package

const fs = require('fs');
const argv = require('minimist')(process.argv.slice(2));
const { outputLine } = require('../lib/main');

/* eslint-disable no-nested-ternary, no-param-reassign, no-console  */

const outputDelay = 0;
let lastLineOut = false;
const renderLine = (line) => {
  // detect if line JSON, if not just output in groups surrounded by two new lines
  try {
    line = JSON.parse(line);
    if (lastLineOut) {
      console.log(lastLineOut, '\n\n');
      lastLineOut = false;
    }
  } catch (e) {
    if (line.trim().length > 0) {
      if (lastLineOut) {
        console.log(lastLineOut);
        lastLineOut = line;
      } else {
        // output lines if more than outputdelay passed since new message
        setTimeout(() => {
          if (lastLineOut) {
            console.log(lastLineOut);
            lastLineOut = false;
          }
        }, outputDelay);
        lastLineOut = `\n\n${line}`;
      }
    }
    return;
  }
  outputLine(line);
};

if (argv._.length) {
  // First parameter is the file to read and parse
  const filename = argv._[0];
  try {
    fs.readFileSync(filename, 'utf8').forEach(renderLine);
  } catch (e) {
    console.error(`Error reading: ${filename}`);
    console.error(e);
    console.error(e.stack);
    process.exit(1);
  }
} else {
  // Read input stream
  process.stdin.resume();
  process.stdin.setEncoding('utf8');

  let streamData = '';
  process.stdin.on('data', (chunk) => {
    if (chunk === '\n') {
      renderLine(streamData);
      streamData = '';
      return;
    } else if (/\n$/.test(chunk)) {
      streamData += chunk;
      streamData.split('\n').forEach(renderLine);
      streamData = '';
      return;
    }
    streamData += chunk;
  });

  process.stdin.on('end', () => {
    renderLine(streamData);
  });
}

/* eslint-enable no-nested-ternary, no-param-reassign, no-console */
